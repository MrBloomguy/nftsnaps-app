// Generated by @wagmi/cli@0.1.11 on 09/12/2024 at 20:18:41
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MintableERC721Snap
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mintableErc721SnapABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_name_', internalType: 'string', type: 'string' },
      { name: '_symbol_', internalType: 'string', type: 'string' },
      {
        name: '_contractURI_',
        internalType: 'struct ISnapCore.ContractURI',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'image', internalType: 'string', type: 'string' },
          { name: 'externalLink', internalType: 'string', type: 'string' },
          { name: 'sellerFeeBasisPoints', internalType: 'string', type: 'string' },
          { name: 'feeRecipient', internalType: 'string', type: 'string' },
        ],
      },
      { name: '_tokenImageURL_', internalType: 'string', type: 'string' },
      { name: '_snapImageURL_', internalType: 'string', type: 'string' },
      { name: '_mintFee_', internalType: 'uint256', type: 'uint256' },
      { name: '_mintFeeRecipient_', internalType: 'address payable', type: 'address' },
      { name: '_creator_', internalType: 'address payable', type: 'address' },
      { name: '_salePrice_', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'MINT_ENDS', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'MINT_LENGTH', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'VISIBLE_ENDS', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VISIBLE_LENGTH',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'contractURI', outputs: [{ name: 'uri', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'get',
    outputs: [
      {
        name: 'snapDetails',
        internalType: 'struct ISnapCore.SnapDetails',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'image', internalType: 'string', type: 'string' },
          { name: 'externalLink', internalType: 'string', type: 'string' },
          { name: 'sellerFeeBasisPoints', internalType: 'string', type: 'string' },
          { name: 'feeRecipient', internalType: 'string', type: 'string' },
          { name: 'creator', internalType: 'address', type: 'address' },
          { name: 'salePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'mintEndTime', internalType: 'uint256', type: 'uint256' },
          { name: 'visibleEndTime', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'getMintFee', outputs: [{ name: 'fee', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSalePrice',
    outputs: [{ name: 'price', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'isMintActive', outputs: [{ name: 'active', internalType: 'bool', type: 'bool' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'isVisible', outputs: [{ name: 'visible', internalType: 'bool', type: 'bool' }] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'mint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'name', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_salePrice', internalType: 'uint256', type: 'uint256' }],
    name: 'setSalePrice',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'symbol', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'totalSupply', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'withdraw', outputs: [] },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SnapFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const snapFactoryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_snapAddress', internalType: 'address', type: 'address', indexed: true },
      { name: '_creator', internalType: 'address', type: 'address', indexed: false },
      { name: '_mintEndsTimestamp', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: '_visibleEndsTimestamp', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'SnapMade',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
      {
        name: '_contractURI',
        internalType: 'struct ISnapCore.ContractURI',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'image', internalType: 'string', type: 'string' },
          { name: 'externalLink', internalType: 'string', type: 'string' },
          { name: 'sellerFeeBasisPoints', internalType: 'string', type: 'string' },
          { name: 'feeRecipient', internalType: 'string', type: 'string' },
        ],
      },
      { name: '_tokenImageURL', internalType: 'string', type: 'string' },
      { name: '_snapImageURL', internalType: 'string', type: 'string' },
      { name: '_mintFee', internalType: 'uint256', type: 'uint256' },
      { name: '_mintFeeRecipient', internalType: 'address payable', type: 'address' },
      { name: '_creator', internalType: 'address payable', type: 'address' },
      { name: '_salePrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSnap',
    outputs: [{ name: 'snapAddress', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_creator', internalType: 'address', type: 'address' }],
    name: 'getActiveByCreator',
    outputs: [{ name: 'snaps', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getActiveSnaps',
    outputs: [{ name: 'snaps', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_creator', internalType: 'address', type: 'address' }],
    name: 'getVisibleByCreator',
    outputs: [{ name: 'snaps', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getVisibleSnaps',
    outputs: [{ name: 'snaps', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_snap', internalType: 'address', type: 'address' }],
    name: 'isActive',
    outputs: [{ name: 'active', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_snap', internalType: 'address', type: 'address' }],
    name: 'isVisible',
    outputs: [{ name: 'visible', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link mintableErc721SnapABI}__.
 */
export function useMintableErc721Snap(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: mintableErc721SnapABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__.
 */
export function useMintableErc721SnapRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mintableErc721SnapABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: mintableErc721SnapABI, ...config } as UseContractReadConfig<typeof mintableErc721SnapABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"MINT_ENDS"`.
 */
export function useMintableErc721SnapMintEnds<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'MINT_ENDS'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'MINT_ENDS', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'MINT_ENDS', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'MINT_ENDS',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"MINT_LENGTH"`.
 */
export function useMintableErc721SnapMintLength<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'MINT_LENGTH'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'MINT_LENGTH', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'MINT_LENGTH', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'MINT_LENGTH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"VISIBLE_ENDS"`.
 */
export function useMintableErc721SnapVisibleEnds<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'VISIBLE_ENDS'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'VISIBLE_ENDS', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'VISIBLE_ENDS', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'VISIBLE_ENDS',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"VISIBLE_LENGTH"`.
 */
export function useMintableErc721SnapVisibleLength<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'VISIBLE_LENGTH'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'VISIBLE_LENGTH', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'VISIBLE_LENGTH', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'VISIBLE_LENGTH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMintableErc721SnapBalanceOf<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"contractURI"`.
 */
export function useMintableErc721SnapContractUri<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'contractURI'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'contractURI', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'contractURI', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'contractURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"get"`.
 */
export function useMintableErc721SnapGet<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'get'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'get', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'get', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'get',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"getApproved"`.
 */
export function useMintableErc721SnapGetApproved<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'getApproved'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'getApproved', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"getMintFee"`.
 */
export function useMintableErc721SnapGetMintFee<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'getMintFee'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'getMintFee', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'getMintFee', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'getMintFee',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"getSalePrice"`.
 */
export function useMintableErc721SnapGetSalePrice<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'getSalePrice'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'getSalePrice', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'getSalePrice', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'getSalePrice',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useMintableErc721SnapIsApprovedForAll<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'isApprovedForAll'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'isApprovedForAll', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"isMintActive"`.
 */
export function useMintableErc721SnapIsMintActive<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'isMintActive'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'isMintActive', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'isMintActive', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'isMintActive',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"isVisible"`.
 */
export function useMintableErc721SnapIsVisible<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'isVisible'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'isVisible', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'isVisible', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'isVisible',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"name"`.
 */
export function useMintableErc721SnapName<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"owner"`.
 */
export function useMintableErc721SnapOwner<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useMintableErc721SnapOwnerOf<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'ownerOf'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'ownerOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useMintableErc721SnapSupportsInterface<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'supportsInterface'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'supportsInterface', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"symbol"`.
 */
export function useMintableErc721SnapSymbol<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useMintableErc721SnapTokenUri<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'tokenURI'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'tokenURI', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'tokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMintableErc721SnapTotalSupply<TSelectData = ReadContractResult<typeof mintableErc721SnapABI, 'totalSupply'>>(
  config: Omit<UseContractReadConfig<typeof mintableErc721SnapABI, 'totalSupply', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: mintableErc721SnapABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof mintableErc721SnapABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__.
 */
export function useMintableErc721SnapWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof mintableErc721SnapABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof mintableErc721SnapABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableErc721SnapABI, TFunctionName>({ abi: mintableErc721SnapABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"approve"`.
 */
export function useMintableErc721SnapApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof mintableErc721SnapABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve'
      }
    : UseContractWriteConfig<TMode, typeof mintableErc721SnapABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableErc721SnapABI, 'approve'>({ abi: mintableErc721SnapABI, functionName: 'approve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"burn"`.
 */
export function useMintableErc721SnapBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof mintableErc721SnapABI, 'burn'>['abi'], 'burn'> & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof mintableErc721SnapABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableErc721SnapABI, 'burn'>({ abi: mintableErc721SnapABI, functionName: 'burn', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"mint"`.
 */
export function useMintableErc721SnapMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof mintableErc721SnapABI, 'mint'>['abi'], 'mint'> & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof mintableErc721SnapABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableErc721SnapABI, 'mint'>({ abi: mintableErc721SnapABI, functionName: 'mint', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useMintableErc721SnapRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof mintableErc721SnapABI, 'renounceOwnership'>['abi'], 'renounceOwnership'> & {
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<TMode, typeof mintableErc721SnapABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableErc721SnapABI, 'renounceOwnership'>({
    abi: mintableErc721SnapABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useMintableErc721SnapSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof mintableErc721SnapABI, 'safeTransferFrom'>['abi'], 'safeTransferFrom'> & {
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<TMode, typeof mintableErc721SnapABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableErc721SnapABI, 'safeTransferFrom'>({
    abi: mintableErc721SnapABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useMintableErc721SnapSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof mintableErc721SnapABI, 'setApprovalForAll'>['abi'], 'setApprovalForAll'> & {
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<TMode, typeof mintableErc721SnapABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableErc721SnapABI, 'setApprovalForAll'>({
    abi: mintableErc721SnapABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"setSalePrice"`.
 */
export function useMintableErc721SnapSetSalePrice<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof mintableErc721SnapABI, 'setSalePrice'>['abi'], 'setSalePrice'> & {
        functionName?: 'setSalePrice'
      }
    : UseContractWriteConfig<TMode, typeof mintableErc721SnapABI, 'setSalePrice'> & {
        abi?: never
        functionName?: 'setSalePrice'
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableErc721SnapABI, 'setSalePrice'>({
    abi: mintableErc721SnapABI,
    functionName: 'setSalePrice',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMintableErc721SnapTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof mintableErc721SnapABI, 'transferFrom'>['abi'], 'transferFrom'> & {
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<TMode, typeof mintableErc721SnapABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableErc721SnapABI, 'transferFrom'>({
    abi: mintableErc721SnapABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useMintableErc721SnapTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof mintableErc721SnapABI, 'transferOwnership'>['abi'], 'transferOwnership'> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<TMode, typeof mintableErc721SnapABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableErc721SnapABI, 'transferOwnership'>({
    abi: mintableErc721SnapABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"withdraw"`.
 */
export function useMintableErc721SnapWithdraw<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof mintableErc721SnapABI, 'withdraw'>['abi'], 'withdraw'> & {
        functionName?: 'withdraw'
      }
    : UseContractWriteConfig<TMode, typeof mintableErc721SnapABI, 'withdraw'> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableErc721SnapABI, 'withdraw'>({ abi: mintableErc721SnapABI, functionName: 'withdraw', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__.
 */
export function usePrepareMintableErc721SnapWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof mintableErc721SnapABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: mintableErc721SnapABI, ...config } as UsePrepareContractWriteConfig<
    typeof mintableErc721SnapABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMintableErc721SnapApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof mintableErc721SnapABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: mintableErc721SnapABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<
    typeof mintableErc721SnapABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareMintableErc721SnapBurn(
  config: Omit<UsePrepareContractWriteConfig<typeof mintableErc721SnapABI, 'burn'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: mintableErc721SnapABI, functionName: 'burn', ...config } as UsePrepareContractWriteConfig<
    typeof mintableErc721SnapABI,
    'burn'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareMintableErc721SnapMint(
  config: Omit<UsePrepareContractWriteConfig<typeof mintableErc721SnapABI, 'mint'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: mintableErc721SnapABI, functionName: 'mint', ...config } as UsePrepareContractWriteConfig<
    typeof mintableErc721SnapABI,
    'mint'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareMintableErc721SnapRenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof mintableErc721SnapABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: mintableErc721SnapABI, functionName: 'renounceOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof mintableErc721SnapABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareMintableErc721SnapSafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof mintableErc721SnapABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: mintableErc721SnapABI, functionName: 'safeTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof mintableErc721SnapABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareMintableErc721SnapSetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof mintableErc721SnapABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: mintableErc721SnapABI, functionName: 'setApprovalForAll', ...config } as UsePrepareContractWriteConfig<
    typeof mintableErc721SnapABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"setSalePrice"`.
 */
export function usePrepareMintableErc721SnapSetSalePrice(
  config: Omit<UsePrepareContractWriteConfig<typeof mintableErc721SnapABI, 'setSalePrice'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: mintableErc721SnapABI, functionName: 'setSalePrice', ...config } as UsePrepareContractWriteConfig<
    typeof mintableErc721SnapABI,
    'setSalePrice'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMintableErc721SnapTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof mintableErc721SnapABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: mintableErc721SnapABI, functionName: 'transferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof mintableErc721SnapABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareMintableErc721SnapTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof mintableErc721SnapABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: mintableErc721SnapABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof mintableErc721SnapABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareMintableErc721SnapWithdraw(
  config: Omit<UsePrepareContractWriteConfig<typeof mintableErc721SnapABI, 'withdraw'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: mintableErc721SnapABI, functionName: 'withdraw', ...config } as UsePrepareContractWriteConfig<
    typeof mintableErc721SnapABI,
    'withdraw'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mintableErc721SnapABI}__.
 */
export function useMintableErc721SnapEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof mintableErc721SnapABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: mintableErc721SnapABI, ...config } as UseContractEventConfig<typeof mintableErc721SnapABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `eventName` set to `"Approval"`.
 */
export function useMintableErc721SnapApprovalEvent(
  config: Omit<UseContractEventConfig<typeof mintableErc721SnapABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: mintableErc721SnapABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof mintableErc721SnapABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useMintableErc721SnapApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof mintableErc721SnapABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: mintableErc721SnapABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof mintableErc721SnapABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useMintableErc721SnapOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof mintableErc721SnapABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: mintableErc721SnapABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof mintableErc721SnapABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mintableErc721SnapABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMintableErc721SnapTransferEvent(
  config: Omit<UseContractEventConfig<typeof mintableErc721SnapABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: mintableErc721SnapABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof mintableErc721SnapABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link snapFactoryABI}__.
 */
export function useSnapFactory(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: snapFactoryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snapFactoryABI}__.
 */
export function useSnapFactoryRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof snapFactoryABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof snapFactoryABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: snapFactoryABI, ...config } as UseContractReadConfig<typeof snapFactoryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snapFactoryABI}__ and `functionName` set to `"getActiveByCreator"`.
 */
export function useSnapFactoryGetActiveByCreator<TSelectData = ReadContractResult<typeof snapFactoryABI, 'getActiveByCreator'>>(
  config: Omit<UseContractReadConfig<typeof snapFactoryABI, 'getActiveByCreator', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: snapFactoryABI, functionName: 'getActiveByCreator', ...config } as UseContractReadConfig<
    typeof snapFactoryABI,
    'getActiveByCreator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snapFactoryABI}__ and `functionName` set to `"getActiveSnaps"`.
 */
export function useSnapFactoryGetActiveSnaps<TSelectData = ReadContractResult<typeof snapFactoryABI, 'getActiveSnaps'>>(
  config: Omit<UseContractReadConfig<typeof snapFactoryABI, 'getActiveSnaps', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: snapFactoryABI, functionName: 'getActiveSnaps', ...config } as UseContractReadConfig<
    typeof snapFactoryABI,
    'getActiveSnaps',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snapFactoryABI}__ and `functionName` set to `"getVisibleByCreator"`.
 */
export function useSnapFactoryGetVisibleByCreator<TSelectData = ReadContractResult<typeof snapFactoryABI, 'getVisibleByCreator'>>(
  config: Omit<UseContractReadConfig<typeof snapFactoryABI, 'getVisibleByCreator', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: snapFactoryABI, functionName: 'getVisibleByCreator', ...config } as UseContractReadConfig<
    typeof snapFactoryABI,
    'getVisibleByCreator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snapFactoryABI}__ and `functionName` set to `"getVisibleSnaps"`.
 */
export function useSnapFactoryGetVisibleSnaps<TSelectData = ReadContractResult<typeof snapFactoryABI, 'getVisibleSnaps'>>(
  config: Omit<UseContractReadConfig<typeof snapFactoryABI, 'getVisibleSnaps', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: snapFactoryABI, functionName: 'getVisibleSnaps', ...config } as UseContractReadConfig<
    typeof snapFactoryABI,
    'getVisibleSnaps',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snapFactoryABI}__ and `functionName` set to `"isActive"`.
 */
export function useSnapFactoryIsActive<TSelectData = ReadContractResult<typeof snapFactoryABI, 'isActive'>>(
  config: Omit<UseContractReadConfig<typeof snapFactoryABI, 'isActive', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: snapFactoryABI, functionName: 'isActive', ...config } as UseContractReadConfig<
    typeof snapFactoryABI,
    'isActive',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snapFactoryABI}__ and `functionName` set to `"isVisible"`.
 */
export function useSnapFactoryIsVisible<TSelectData = ReadContractResult<typeof snapFactoryABI, 'isVisible'>>(
  config: Omit<UseContractReadConfig<typeof snapFactoryABI, 'isVisible', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: snapFactoryABI, functionName: 'isVisible', ...config } as UseContractReadConfig<
    typeof snapFactoryABI,
    'isVisible',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snapFactoryABI}__.
 */
export function useSnapFactoryWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof snapFactoryABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof snapFactoryABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof snapFactoryABI, TFunctionName>({ abi: snapFactoryABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snapFactoryABI}__ and `functionName` set to `"createSnap"`.
 */
export function useSnapFactoryCreateSnap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof snapFactoryABI, 'createSnap'>['abi'], 'createSnap'> & {
        functionName?: 'createSnap'
      }
    : UseContractWriteConfig<TMode, typeof snapFactoryABI, 'createSnap'> & {
        abi?: never
        functionName?: 'createSnap'
      } = {} as any
) {
  return useContractWrite<TMode, typeof snapFactoryABI, 'createSnap'>({ abi: snapFactoryABI, functionName: 'createSnap', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snapFactoryABI}__.
 */
export function usePrepareSnapFactoryWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof snapFactoryABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: snapFactoryABI, ...config } as UsePrepareContractWriteConfig<typeof snapFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snapFactoryABI}__ and `functionName` set to `"createSnap"`.
 */
export function usePrepareSnapFactoryCreateSnap(
  config: Omit<UsePrepareContractWriteConfig<typeof snapFactoryABI, 'createSnap'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: snapFactoryABI, functionName: 'createSnap', ...config } as UsePrepareContractWriteConfig<
    typeof snapFactoryABI,
    'createSnap'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link snapFactoryABI}__.
 */
export function useSnapFactoryEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof snapFactoryABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: snapFactoryABI, ...config } as UseContractEventConfig<typeof snapFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link snapFactoryABI}__ and `eventName` set to `"SnapMade"`.
 */
export function useSnapFactorySnapMadeEvent(
  config: Omit<UseContractEventConfig<typeof snapFactoryABI, 'SnapMade'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: snapFactoryABI, eventName: 'SnapMade', ...config } as UseContractEventConfig<typeof snapFactoryABI, 'SnapMade'>)
}
